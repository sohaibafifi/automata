<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>Automate</name>
  </assembly>
  <members>
    <member name="N:Automates">
    </member>
    <member name="T:Automates.Gfa">
    </member>
    <member name="F:Automates.Gfa.Read">
    </member>
    <member name="F:Automates.Gfa.PGfa_CV">
    </member>
    <member name="M:Automates.Gfa.#ctor(System.Collections.ArrayList,System.Int32,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList[0:,0:])">
      <summary>
Initializes a new instance of the <see cref="T:Automates.Gfa">Gfa</see> class.</summary>
      <param name="X">
</param>
      <param name="S">
</param>
      <param name="S0">
</param>
      <param name="F">
</param>
      <param name="I">
</param>
    </member>
    <member name="M:Automates.Gfa.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Automates.Gfa">Gfa</see> class.</summary>
    </member>
    <member name="M:Automates.Gfa.InitI">
      <summary>
Initialiser la table de transitions de l'automate</summary>
    </member>
    <member name="M:Automates.Gfa.InitI(System.Collections.ArrayList[0:,0:])">
      <summary>
Initiliser la table de transitions par des valeurs predefinies</summary>
      <param name="I">
La table de transitions initiale</param>
    </member>
    <member name="M:Automates.Gfa.AddInstruction(System.Int32,System.String,System.Int32)">
      <param name="Si">
</param>
      <param name="Word">
</param>
      <param name="Sj">
</param>
    </member>
    <member name="M:Automates.Gfa.AddInstruction(System.Int32,System.Char,System.Int32)">
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="Sj">
</param>
    </member>
    <member name="M:Automates.Gfa.AddInstruction(System.Int32,System.String,System.Collections.ArrayList)">
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="SjList">
</param>
    </member>
    <member name="M:Automates.Gfa.AddInstruction(Automates.GfaInstruction)">
      <param name="instruction">
</param>
    </member>
    <member name="M:Automates.Gfa.RemoveInstruction(System.Int32,System.String,System.Int32)">
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="Sj">
</param>
    </member>
    <member name="M:Automates.Gfa.RemoveInstruction(Automates.GfaInstruction)">
      <param name="instruction">
</param>
    </member>
    <member name="M:Automates.Gfa.RemoveAllInstructions(System.Int32,System.String)">
      <param name="Si">
</param>
      <param name="Xi">
</param>
    </member>
    <member name="M:Automates.Gfa.getInstruction(System.Int32,System.String)">
      <param name="Si">
</param>
      <param name="Xi">
</param>
    </member>
    <member name="M:Automates.Gfa.SortInstructions(System.Int32,System.String)">
      <param name="Si">
</param>
      <param name="Xi">
</param>
    </member>
    <member name="M:Automates.Gfa.getMirror">
      <summary>
Obtenir l'automate de language miroire</summary>
      <returns>
Un automate de type PGfa</returns>
    </member>
    <member name="M:Automates.Gfa.toIndex(System.String)">
      <param name="word">
</param>
    </member>
    <member name="M:Automates.Gfa.toPGfa">
      <summary>
Convertir l'automte vers un automate de type PGfa equivalant</summary>
      <returns>
Un automate partiellement généralisé</returns>
    </member>
    <member name="M:Automates.Gfa.toNfa">
      <summary>
Convertir l'automte vers un automate de type Nfa equivalant</summary>
      <returns>
Un automate non deterministe</returns>
    </member>
    <member name="M:Automates.Gfa.toDfa">
      <summary>
Convertir l'automte vers un automate de type Dfa equivalant</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automates.Gfa.toComplete">
      <summary>
Convertir l'automte vers un automate Complet</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automates.Gfa.toGfa">
      <summary>
Convertir l'automte vers un automate de type Gfa equivalant</summary>
      <returns>
Un automate généralisé</returns>
    </member>
    <member name="M:Automates.Gfa.toReduced">
      <summary>
Convertir l'automte vers un automate reduit</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automates.Gfa.Recognize(System.String)">
      <summary>
Reconnetre un mot</summary>
      <returns>
true si le mot est reconnu par l'automate</returns>
      <param name="word">
le mot à tester</param>
    </member>
    <member name="M:Automates.Gfa.trace(System.String)">
      <summary>
Reconnetre un mot</summary>
      <returns>
retourne le traçage !</returns>
      <param name="word">
le mot à tester</param>
    </member>
    <member name="T:Automates.DfaCreation">
    </member>
    <member name="F:Automates.DfaCreation.initial">
    </member>
    <member name="F:Automates.DfaCreation.UserDfa">
    </member>
    <member name="F:Automates.DfaCreation.panel1">
    </member>
    <member name="F:Automates.DfaCreation.Modifier1">
    </member>
    <member name="F:Automates.DfaCreation.Valide1">
    </member>
    <member name="F:Automates.DfaCreation.groupBox3">
    </member>
    <member name="F:Automates.DfaCreation.label3">
    </member>
    <member name="F:Automates.DfaCreation.Xlist">
    </member>
    <member name="F:Automates.DfaCreation.RmX">
    </member>
    <member name="F:Automates.DfaCreation.caracteres">
    </member>
    <member name="F:Automates.DfaCreation.ToX">
    </member>
    <member name="F:Automates.DfaCreation.groupBox1">
    </member>
    <member name="F:Automates.DfaCreation.label2">
    </member>
    <member name="F:Automates.DfaCreation.initialList">
    </member>
    <member name="F:Automates.DfaCreation.RmF">
    </member>
    <member name="F:Automates.DfaCreation.CopytoF">
    </member>
    <member name="F:Automates.DfaCreation.labelEtatsFinaux">
    </member>
    <member name="F:Automates.DfaCreation.labelEtats">
    </member>
    <member name="F:Automates.DfaCreation.EtatsFList">
    </member>
    <member name="F:Automates.DfaCreation.EtatsList">
    </member>
    <member name="F:Automates.DfaCreation.NbEtatLabel">
    </member>
    <member name="F:Automates.DfaCreation.panel2">
    </member>
    <member name="F:Automates.DfaCreation.Valider2">
    </member>
    <member name="F:Automates.DfaCreation.groupBox2">
    </member>
    <member name="F:Automates.DfaCreation.label6">
    </member>
    <member name="F:Automates.DfaCreation.label5">
    </member>
    <member name="F:Automates.DfaCreation.label4">
    </member>
    <member name="F:Automates.DfaCreation.Ajouter">
    </member>
    <member name="F:Automates.DfaCreation.groupBox4">
    </member>
    <member name="F:Automates.DfaCreation.label7">
    </member>
    <member name="F:Automates.DfaCreation.supprimer">
    </member>
    <member name="F:Automates.DfaCreation.transitions">
    </member>
    <member name="F:Automates.DfaCreation.SJ">
    </member>
    <member name="F:Automates.DfaCreation.SiXSj">
    </member>
    <member name="F:Automates.DfaCreation.SI">
    </member>
    <member name="F:Automates.DfaCreation.Name_box">
    </member>
    <member name="F:Automates.DfaCreation.label1">
    </member>
    <member name="F:Automates.DfaCreation.annuler">
    </member>
    <member name="F:Automates.DfaCreation.Nbetats">
    </member>
    <member name="M:Automates.DfaCreation.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Automates.DfaCreation">DfaCreation</see> class.</summary>
    </member>
    <member name="M:Automates.DfaCreation.InitializeComponent">
    </member>
    <member name="M:Automates.DfaCreation.Valide1_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.Modifier1_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.ToX_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.RmX_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.caracteres_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.Xlist_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.EtatsList_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.EtatsFList_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.Nbetats_ValueChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.initialList_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.caracteres_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.Xlist_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.EtatsList_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.SI_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.CopytoF_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.RmF_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.SiXSj_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.SJ_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.Ajouter_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.transitions_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.supprimer_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.Valider2_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.ToInt(System.String)">
      <param name="etat">
</param>
    </member>
    <member name="M:Automates.DfaCreation.tripletToII(System.String)">
      <param name="triplet">
</param>
    </member>
    <member name="M:Automates.DfaCreation.Dfa_creation_Load(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.Name_box_TextChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.DfaCreation.EtatsFList_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="T:Automates.Instruction">
    </member>
    <member name="F:Automates.Instruction.Si">
    </member>
    <member name="F:Automates.Instruction.Xi">
    </member>
    <member name="F:Automates.Instruction.Sj">
    </member>
    <member name="M:Automates.Instruction.#ctor(System.Int32,System.Char,System.Int32)">
      <summary>
Initializes a new instance of the <see cref="T:Automates.Instruction">Instruction</see> class.</summary>
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="Sj">
</param>
    </member>
    <member name="M:Automates.Instruction.ToString">
    </member>
    <member name="M:Automates.Instruction.Equals(Automates.Instruction)">
      <param name="instruction">
</param>
    </member>
    <member name="T:Automates.Grammer">
      <summary>
la classe qui definit une grammaire</summary>
    </member>
    <member name="F:Automates.Grammer.NOVARIABLE">
    </member>
    <member name="F:Automates.Grammer.Name">
    </member>
    <member name="F:Automates.Grammer.X">
    </member>
    <member name="F:Automates.Grammer.V">
    </member>
    <member name="F:Automates.Grammer.Read">
    </member>
    <member name="F:Automates.Grammer.S">
    </member>
    <member name="F:Automates.Grammer.P">
    </member>
    <member name="F:Automates.Grammer.Gfa_CV">
    </member>
    <member name="F:Automates.Grammer.StCorTab">
    </member>
    <member name="M:Automates.Grammer.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,System.Char)">
      <summary>
initialisation de la grammaire</summary>
      <param name="X">
l'alphabet</param>
      <param name="V">
les variables</param>
      <param name="S">
l'axiome</param>
    </member>
    <member name="M:Automates.Grammer.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Automates.Grammer">Grammer</see> class.</summary>
    </member>
    <member name="T:Automates.Grammer.ProductionRule">
      <summary>
La definition des regles de productions</summary>
    </member>
    <member name="F:Automates.Grammer.ProductionRule.A">
    </member>
    <member name="F:Automates.Grammer.ProductionRule.W">
    </member>
    <member name="F:Automates.Grammer.ProductionRule.B">
    </member>
    <member name="M:Automates.Grammer.ProductionRule.#ctor(System.Char,System.String,System.Char)">
      <summary>
Initializes a new instance of the <see cref="T:Automates.Grammer.ProductionRule">ProductionRule</see> structure.</summary>
      <param name="a">
</param>
      <param name="w">
</param>
      <param name="b">
</param>
    </member>
    <member name="M:Automates.Grammer.ProductionRule.#ctor(System.Char,System.String)">
      <summary>
Initializes a new instance of the <see cref="T:Automates.Grammer.ProductionRule">ProductionRule</see> structure.</summary>
      <param name="a">
</param>
      <param name="w">
</param>
    </member>
    <member name="M:Automates.Grammer.ProductionRule.ToString">
    </member>
    <member name="M:Automates.Grammer.getVar(System.String)">
      <summary>
Obtenir la variable d'arrivée</summary>
      <param name="production">
</param>
    </member>
    <member name="M:Automates.Grammer.getWord(System.String)">
      <summary>
Obtenir le mot dans la production</summary>
      <param name="production">
</param>
    </member>
    <member name="M:Automates.Grammer.AddProduction(Automates.Grammer.ProductionRule)">
      <summary>
Ajouter la production en entée à l'ensemble des regles des productions</summary>
      <param name="production">
</param>
    </member>
    <member name="M:Automates.Grammer.RemoveProduction(Automates.Grammer.ProductionRule)">
      <summary>
supprimer la regle de l'ensemble des regles des productions</summary>
      <param name="production">
</param>
    </member>
    <member name="M:Automates.Grammer.getProductions(System.Char)">
      <summary>
trouver la regle de production à partir de la variable de depart</summary>
      <param name="A">
</param>
    </member>
    <member name="M:Automates.Grammer.toIndex(System.Char)">
      <summary>
Donner l'index de la variable dans l'ensemble V</summary>
      <param name="A">
</param>
    </member>
    <member name="M:Automates.Grammer.isValidLetter(System.Char)">
      <summary>
le caractere en entrée est alpha-numerique</summary>
      <param name="c">
</param>
    </member>
    <member name="M:Automates.Grammer.InAlphabet(System.String)">
      <summary>
retourner si le mot en entrée contient des caracteres valide</summary>
      <param name="word">
</param>
    </member>
    <member name="M:Automates.Grammer.AddVariable(System.Char)">
      <summary>
ajouter une variable à l'ensemble V</summary>
      <param name="A">
</param>
    </member>
    <member name="M:Automates.Grammer.AddLetter(System.Char)">
      <summary>
ajouter une lettre à l'alphabet</summary>
      <param name="c">
</param>
    </member>
    <member name="M:Automates.Grammer.toGfa">
      <summary>
Transformer la grammaire en un automate généralisé</summary>
    </member>
    <member name="M:Automates.Grammer.ToString">
    </member>
    <member name="M:Automates.Grammer.AfficherGrammair(System.Windows.Forms.RichTextBox)">
      <summary>
affichage de grammmaire en couleurs</summary>
      <param name="RTF">
</param>
    </member>
    <member name="T:Automates.main">
    </member>
    <member name="F:Automates.main.Automates_list">
    </member>
    <member name="F:Automates.main.Selected">
    </member>
    <member name="F:Automates.main.dragEtat">
    </member>
    <member name="F:Automates.main.clicked">
    </member>
    <member name="M:Automates.main.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Automates.main">main</see> class.</summary>
    </member>
    <member name="M:Automates.main.nouvDeterministeMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.nouvNonDeterministeMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.main_Load(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Automates_tree_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.refrech_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.getautomate(System.String)">
      <param name="Name">
</param>
    </member>
    <member name="M:Automates.main.ouvrirMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.main_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Save_ws_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Automates_tree_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.enregistrerMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.main_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.main_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.actualiserToolStripMenuItem_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Menu_ItemClicked(System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.pictureBox3_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.pictureBox1_MouseHover(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.refrech2_MouseLeave(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Info(System.String)">
      <param name="Info">
</param>
    </member>
    <member name="M:Automates.main.resetInfo(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Pellipse_MouseHover(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.fixe_MouseHover(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Automates_tree_MouseHover(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.getEtat(System.Drawing.Point)">
      <param name="p">
</param>
    </member>
    <member name="M:Automates.main.nouvPartiellementGénéraliséMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.nouvGénéraliséMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.nouvFromGrammaireMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.tabPage2_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.GrammerRTF_TextChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.tabPage3_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Actualiser_icon_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.aideToolStripMenuItem_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Tracer_btn_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Mot_test_TextChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.miroirMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.complementMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.itérationMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.itérationPositiveMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.concaténationMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.unionMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.AjouterNfa(Automates.Auto)">
      <param name="UserAuto">
</param>
    </member>
    <member name="M:Automates.main.AjouterDfa(Automates.Auto)">
      <param name="UserAuto">
</param>
    </member>
    <member name="M:Automates.main.AjouterPGfa(Automates.Auto)">
      <param name="UserAuto">
</param>
    </member>
    <member name="M:Automates.main.AjouterGfa(Automates.Auto)">
      <param name="UserAuto">
</param>
    </member>
    <member name="M:Automates.main.quiterMI_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.ouvrirUnWorkspaceToolStripMenuItem_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.aProposDuProgrammeToolStripMenuItem_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Drawpanel_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Drawpanel_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Drawpanel_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Drawpanel_MouseHover(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Drawpanel_DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Drawpanel_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Drawpanel_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.fixe_CheckedChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.sauvegarderLeDessinToolStripMenuItem_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.toolStripTextBox1_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.saveRTF(System.Windows.Forms.RichTextBox,System.String)">
      <param name="rtf">
</param>
      <param name="path">
</param>
    </member>
    <member name="M:Automates.main.Automates_tree_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Automates_tree_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.DessinRight_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Automates_tree_MouseClick_1(System.Object,System.Windows.Forms.MouseEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.Automates_tree_MouseClick_2(System.Object,System.Windows.Forms.MouseEventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.OpenRight_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.main.GrammaireRight_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="N:Automates.Properties">
    </member>
    <member name="T:Automates.Properties.Resources">
      <summary>
Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.</summary>
    </member>
    <member name="F:Automates.Properties.Resources.resourceMan">
    </member>
    <member name="F:Automates.Properties.Resources.resourceCulture">
    </member>
    <member name="M:Automates.Properties.Resources.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Automates.Properties.Resources">Resources</see> class.</summary>
    </member>
    <member name="P:Automates.Properties.Resources.left_title_bg">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.help">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.page_save">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.intro_text_box">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.bodybg">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.title">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.menu2">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources._new">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.box">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.Splash">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.bg2">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.back">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.footer">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.Culture">
      <summary>
Remplace la propriété CurrentUICulture du thread actuel pour toutes les recherches de ressources à l'aide de cette classe de ressource fortement typée.</summary>
    </member>
    <member name="P:Automates.Properties.Resources.add">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.menu_r">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.newsletterbg">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.bg">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.page_save1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.Tree_bg">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.boxbg">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.menubottom">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.fade">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.contentbg">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.bg3">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.arrow_undo">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.bg1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.pic">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.page_refresh">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.application_edit">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.back1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.h2">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.line">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.copyright">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.Tree_bg1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.information">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.menu_r1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.body">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.menu">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.CrystalBlue">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.arrow_rotate_anticlockwise">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.ResourceManager">
      <summary>
Retourne l'instance ResourceManager mise en cache utilisée par cette classe.</summary>
    </member>
    <member name="P:Automates.Properties.Resources.page_edit">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.book_open">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.arrow_join">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.h2_back">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.page_white_word">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.chart_line">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.title1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.mainbar">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.action_forward1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.header">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.header1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.attach">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.arrow_switch">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.action_back1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.menu1">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.headerbg">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Automates.Properties.Resources.title_back">
      <summary>
Gets .</summary>
    </member>
    <member name="T:Automates.Dfa">
      <summary>
La classe defini les automates de type Dfa : automates d'etats finis deterministe</summary>
    </member>
    <member name="F:Automates.Dfa.I">
    </member>
    <member name="F:Automates.Dfa.RdStateCorTab">
    </member>
    <member name="F:Automates.Dfa.dejaVu">
    </member>
    <member name="F:Automates.Dfa.coAccessible">
    </member>
    <member name="M:Automates.Dfa.#ctor(System.Collections.ArrayList,System.Int32,System.Int32,System.Collections.ArrayList,System.Int32[0:,0:])">
      <summary>
Initialise une nouvelle instance de la classe Dfa avec les valeurs passées en parametres</summary>
      <param name="X">
L'alphabet de l'automate</param>
      <param name="S">
Le nombre d'etats de l'automate</param>
      <param name="S0">
L'etats inititial de l'automate</param>
      <param name="F">
Les etats finaux de l'automate</param>
      <param name="I">
La table de transitions de l'automate</param>
    </member>
    <member name="M:Automates.Dfa.#ctor">
      <summary>
Initialise une nouvelle instance de la classe Dfa avec un table des instructions vide .</summary>
    </member>
    <member name="M:Automates.Dfa.#ctor(System.Collections.ArrayList,System.Int32)">
      <summary>
Initialise une nouvelle instance de la classe Dfa avec l'alphabet et le nombre d'etats passées en parametres.</summary>
      <param name="X">
L'alphabet de l'automate</param>
      <param name="S">
Le nombre d'etats</param>
    </member>
    <member name="M:Automates.Dfa.InitI">
      <summary>
Initialisation de I on initialise la table de transitions à -1 (-1 indique que l'instruction n'existe pas)</summary>
    </member>
    <member name="M:Automates.Dfa.InitI(System.Int32[0:,0:])">
      <summary>
Initialisation de la table de transitions avec des transitions predefinies</summary>
      <param name="I">
La table de transitions predefinies</param>
    </member>
    <member name="M:Automates.Dfa.AddInstruction(System.Int32,System.Char,System.Int32)">
      <summary>
Ajouter une transition Si -Xi-&gt; Sj Cette fonction affiche un message pour confirmer le remplacement en cas d'existence de transition de Si lisant Xi Car l'automate est deterministe</summary>
      <returns>
retourne 0 en cas de succes ,1 en cas de remplacement et 2 si rien n'est fait</returns>
      <param name="Si">
l'etat courant.</param>
      <param name="Xi">
Le caractere lu.</param>
      <param name="Sj">
L'etat suivant .</param>
    </member>
    <member name="M:Automates.Dfa.AddInstruction(Automates.Instruction)">
      <summary>
Ajouter une transition</summary>
      <returns>
retourne 0 en cas de succes ,1 en cas de remplacement et 2 si rien n'est fait</returns>
      <param name="instruction">
La transition à ajouter</param>
    </member>
    <member name="M:Automates.Dfa.AddInstruction(System.Int32,System.Char,System.Int32,System.Boolean)">
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="Sj">
</param>
      <param name="replace">
</param>
    </member>
    <member name="M:Automates.Dfa.AddInstruction(Automates.Instruction,System.Boolean)">
      <summary>
Ajouter une transition</summary>
      <returns>
retourne 0 en cas de succes ,1 en cas de remplacement et 2 sinon</returns>
      <param name="instruction">
La transition à ajouter</param>
      <param name="replace">
true pour le remplacement en cas de l'existance de cette transition</param>
    </member>
    <member name="M:Automates.Dfa.RemoveInstruction(System.Int32,System.Char,System.Int32)">
      <summary>
Supprimer une transition Si -Xi-&gt; Sj</summary>
      <returns>
retourne 1 en cas d'inexistance de la transition à supprimer , 0 en cas de succes</returns>
      <param name="Si">
l'etat courant</param>
      <param name="Xi">
Le caractere lu.</param>
      <param name="Sj">
L'etat suivant</param>
    </member>
    <member name="M:Automates.Dfa.RemoveInstruction(Automates.Instruction)">
      <summary>
Supprimer une transition Si -Xi-&gt; Sj</summary>
      <param name="instruction">
</param>
    </member>
    <member name="M:Automates.Dfa.getInstruction(System.Int32,System.Char)">
      <summary>
Obtenir l'etat suivant de Si lisant Xi</summary>
      <returns>
l'etat suivant de Si lisant Xi (Sj)</returns>
      <param name="Si">
l'etat courant</param>
      <param name="Xi">
Le caractere lu.</param>
    </member>
    <member name="M:Automates.Dfa.Recognize(System.String)">
      <summary>
Reconettre un mot</summary>
      <returns>
True si le mot est reconné ,False sinon</returns>
      <param name="word">
Le mot à rencontre</param>
    </member>
    <member name="M:Automates.Dfa.trace(System.String)">
      <summary>
Reconnetre un mot</summary>
      <returns>
retourne le traçage !</returns>
      <param name="word">
le mot à tester</param>
    </member>
    <member name="M:Automates.Dfa.isComplete">
      <summary>
Verifier si l'automate est deja complet.</summary>
      <returns>
True si l'automate est complet , False sinon</returns>
    </member>
    <member name="M:Automates.Dfa.isReduced">
      <summary>
Verifier si l'automate est deja reduit</summary>
      <returns>
True si l'automate est reduit , False sinon</returns>
    </member>
    <member name="M:Automates.Dfa.Closure(System.Int32)">
      <summary>
Fermeture transitive la fonction retourne l'ensemble de tous les etats qu'on peut atteindre à partir de l'état "state" en plus de "state" lui même</summary>
      <param name="state">
</param>
    </member>
    <member name="M:Automates.Dfa.CoAccessible(System.Collections.ArrayList)">
      <param name="set">
</param>
    </member>
    <member name="M:Automates.Dfa.Co_Accessible(System.Int32)">
      <summary>
Verefier si un etat est coaccessible</summary>
      <returns>
True si l'etat est coaccessible , False sinon</returns>
      <param name="state">
L'etat à verifier</param>
    </member>
    <member name="M:Automates.Dfa.toComplete">
      <summary>
Convertir l'automte vers un automate Complet</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automates.Dfa.toReduced">
      <summary>
Convertir l'automte vers un automate reduit</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automates.Dfa.toDfa">
      <summary>
Convertir l'automte vers un automate de type Dfa equivalant</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automates.Dfa.toNfa">
      <summary>
Convertir l'automte vers un automate de type Nfa equivalant</summary>
      <returns>
Un automate non deterministe</returns>
    </member>
    <member name="M:Automates.Dfa.toPGfa">
      <summary>
Convertir l'automte vers un automate de type PGfa equivalant</summary>
      <returns>
Un automate partiellement généralisé</returns>
    </member>
    <member name="M:Automates.Dfa.toGfa">
      <summary>
Convertir l'automte vers un automate de type Gfa equivalant</summary>
      <returns>
Un automate généralisé</returns>
    </member>
    <member name="M:Automates.Dfa.InstrTabToArrayList">
    </member>
    <member name="M:Automates.Dfa.getInstructionTable">
    </member>
    <member name="M:Automates.Dfa.Rd_StoString">
    </member>
    <member name="M:Automates.Dfa.ItoStringTriplet">
    </member>
    <member name="M:Automates.Dfa.ItoString">
    </member>
    <member name="T:Automates.Auto">
    </member>
    <member name="F:Automates.Auto.type">
    </member>
    <member name="F:Automates.Auto.Automate">
    </member>
    <member name="M:Automates.Auto.#ctor(Automata)">
      <summary>
Initializes a new instance of the <see cref="T:Automates.Auto">Auto</see> structure.</summary>
      <param name="automate">
</param>
    </member>
    <member name="M:Automates.Auto.ToString">
    </member>
    <member name="T:Automates.workspace">
    </member>
    <member name="M:Automates.workspace.save(System.Collections.ArrayList,System.String)">
      <param name="Automate_list">
</param>
      <param name="Path">
</param>
    </member>
    <member name="M:Automates.workspace.read(System.String)">
      <param name="Path">
</param>
    </member>
    <member name="T:Automates.AutomateReader">
    </member>
    <member name="M:Automates.AutomateReader.read(System.String)">
      <param name="Path">
</param>
    </member>
    <member name="T:Automates.Nfa">
    </member>
    <member name="F:Automates.Nfa.Dfa_CV">
    </member>
    <member name="F:Automates.Nfa.StCorTab">
    </member>
    <member name="M:Automates.Nfa.#ctor(System.Collections.ArrayList,System.Int32,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList[0:,0:])">
      <summary>
Constructeur , créer un Automate d'etats finis non deterministe</summary>
      <remarks>
<font color="#FF0000">Nfa </font>(en anglais) : automate d'etats finis non deterministe .</remarks>
      <param name="X">
L'alphabet</param>
      <param name="S">
Le nombre d'etats</param>
      <param name="S0">
L'etat initial</param>
      <param name="F">
Les etats finaux</param>
      <param name="I">
Le table de transitions</param>
    </member>
    <member name="M:Automates.Nfa.#ctor">
      <summary>
Initialisation de l'automate d'etats finis non deterministe</summary>
    </member>
    <member name="M:Automates.Nfa.AddInstruction(System.Int32,System.Char,System.Int32)">
      <summary>
Ajouter une instruction au table des instructions de l'automate</summary>
      <param name="Si">
l'etat actual</param>
      <param name="Xi">
le caractere lu</param>
      <param name="Sj">
l'etat suivant</param>
    </member>
    <member name="M:Automates.Nfa.AddInstruction(System.Int32,System.Char,System.Collections.ArrayList)">
      <summary>
Ajouter une instruction au table des instructions de l'automate</summary>
      <param name="Si">
l'etat actual</param>
      <param name="Xi">
le caractere lu</param>
      <param name="SjList">
les etats suivants</param>
    </member>
    <member name="M:Automates.Nfa.AddInstruction(Automates.Instruction)">
      <summary>
Ajouter une instruction au table des instructions de l'automate</summary>
      <param name="instruction">
l'instruction à ajouter</param>
    </member>
    <member name="M:Automates.Nfa.RemoveInstruction(System.Int32,System.Char,System.Int32)">
      <summary>
Supprimer une instruction</summary>
      <param name="Si">
Si</param>
      <param name="Xi">
le caractere lu</param>
      <param name="Sj">
l'etat suivant</param>
    </member>
    <member name="M:Automates.Nfa.RemoveInstruction(Automates.Instruction)">
      <summary>
Supprimer une instruction</summary>
      <param name="instruction">
l'instruction à supprimer</param>
    </member>
    <member name="M:Automates.Nfa.RemoveAllInstructions(System.Int32,System.Char)">
      <summary>
Supprimer tous les instructions de Si lisant Xi</summary>
      <param name="Si">
l'etat Si</param>
      <param name="Xi">
Le caractere lu</param>
    </member>
    <member name="M:Automates.Nfa.SortInstructions(System.Int32,System.Char)">
      <summary>
trier les instructions de Si lisant Xi</summary>
      <param name="Si">
L'etat Si</param>
      <param name="Xi">
Le caractere lu</param>
    </member>
    <member name="M:Automates.Nfa.toDfa">
      <summary>
Convertir l'automate Nfa courant vers un automate Dfa equivalant.</summary>
      <returns>
Un automate de type Dfa</returns>
    </member>
    <member name="M:Automates.Nfa.toComplete">
      <summary>
Convertir l'automate courant vers un automate complet equivalant</summary>
      <returns>
l'automate Dfa complet equivalant</returns>
    </member>
    <member name="M:Automates.Nfa.toReduced">
      <summary>
Convertir l'automate courant vers un automate reduit equivalant</summary>
      <returns>
Automate de type Dfa reduit</returns>
    </member>
    <member name="M:Automates.Nfa.toNfa">
      <summary>
Convertir l'automte vers un automate de type Nfa equivalant</summary>
      <returns>
Un automate non deterministe</returns>
    </member>
    <member name="M:Automates.Nfa.toPGfa">
      <summary>
Convertir l'automte vers un automate de type PGfa equivalant</summary>
      <returns>
Un automate partiellement généralisé</returns>
    </member>
    <member name="M:Automates.Nfa.toGfa">
      <summary>
Convertir l'automte vers un automate de type Gfa equivalant</summary>
      <returns>
Un automate généralisé</returns>
    </member>
    <member name="M:Automates.Nfa.Recognize(System.String)">
      <summary>
Reconnetre un mot</summary>
      <returns>
true si le mot est reconnu par l'automate</returns>
      <param name="word">
le mot à tester</param>
    </member>
    <member name="M:Automates.Nfa.trace(System.String)">
      <summary>
Reconnetre un mot</summary>
      <returns>
retourne le traçage !</returns>
      <param name="word">
le mot à tester</param>
    </member>
    <member name="T:Automates.Properties.Settings">
    </member>
    <member name="F:Automates.Properties.Settings.defaultInstance">
    </member>
    <member name="P:Automates.Properties.Settings.Default">
      <summary>
Gets .</summary>
    </member>
    <member name="T:Automates.PGfa">
    </member>
    <member name="F:Automates.PGfa.Nfa_CV">
    </member>
    <member name="M:Automates.PGfa.#ctor(System.Collections.ArrayList,System.Int32,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList[0:,0:])">
      <summary>
initialisation de l'automate partiellement généralisé</summary>
      <param name="X">
l'alphabet</param>
      <param name="S">
le nom de l'automate</param>
      <param name="S0">
</param>
      <param name="F">
</param>
      <param name="I">
</param>
    </member>
    <member name="M:Automates.PGfa.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Automates.PGfa">PGfa</see> class.</summary>
    </member>
    <member name="M:Automates.PGfa.#ctor(System.Collections.ArrayList,System.Int32)">
      <summary>
Initializes a new instance of the <see cref="T:Automates.PGfa">PGfa</see> class.</summary>
      <param name="X">
</param>
      <param name="S">
</param>
    </member>
    <member name="M:Automates.PGfa.AddInstruction(System.Int32,System.Char,System.Int32)">
      <summary>
ajouter une instruction à l'ensemble des instructions</summary>
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="Sj">
</param>
    </member>
    <member name="M:Automates.PGfa.AddInstruction(System.Int32,System.Char,System.Collections.ArrayList)">
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="SjList">
</param>
    </member>
    <member name="M:Automates.PGfa.AddInstruction(Automates.Instruction)">
      <param name="instruction">
</param>
    </member>
    <member name="M:Automates.PGfa.RemoveInstruction(System.Int32,System.Char,System.Int32)">
      <summary>
supprimer l'instruction dont les parametres sont en entée</summary>
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="Sj">
</param>
    </member>
    <member name="M:Automates.PGfa.RemoveInstruction(Automates.Instruction)">
      <param name="instruction">
</param>
    </member>
    <member name="M:Automates.PGfa.RemoveAllInstructions(System.Int32,System.Char)">
      <summary>
Supprimer toures les instructions de l'automate</summary>
      <param name="Si">
</param>
      <param name="Xi">
</param>
    </member>
    <member name="M:Automates.PGfa.SortInstructions(System.Int32,System.Char)">
      <summary>
ordrer les instructions de l'automate</summary>
      <param name="Si">
</param>
      <param name="Xi">
</param>
    </member>
    <member name="M:Automates.PGfa.getInstruction(System.Int32,System.Char)">
      <summary>
obtenir l'etat final de l'instruction à partir des parametres en entrée</summary>
      <param name="Si">
</param>
      <param name="Xi">
</param>
    </member>
    <member name="M:Automates.PGfa.toNfa">
      <summary>
retourner un automate non deterministe à partir de l'automate patiellement généralisé</summary>
    </member>
    <member name="M:Automates.PGfa.toDfa">
      <summary>
retourner un automate deterministe à partir de l'automate patiellement généralisé</summary>
    </member>
    <member name="M:Automates.PGfa.toComplete">
      <summary>
retourner un automate deterministe complet à partir de l'automate patiellement généralisé</summary>
    </member>
    <member name="M:Automates.PGfa.toReduced">
      <summary>
retourner un automate deterministe reduit à partir de l'automate patiellement généralisé</summary>
    </member>
    <member name="M:Automates.PGfa.toPGfa">
      <summary>
Convertir l'automte vers un automate de type PGfa equivalant</summary>
      <returns>
Un automate partiellement généralisé</returns>
    </member>
    <member name="M:Automates.PGfa.toGfa">
      <summary>
retourner un automate généralisé à partir de l'automate patiellement généralisé</summary>
    </member>
    <member name="M:Automates.PGfa.Recognize(System.String)">
      <summary>
reconnaitre le mot en enreée</summary>
      <param name="word">
</param>
    </member>
    <member name="M:Automates.PGfa.trace(System.String)">
      <summary>
Reconnetre un mot</summary>
      <returns>
retourne le traçage !</returns>
      <param name="word">
le mot à tester</param>
    </member>
    <member name="T:Automata">
    </member>
    <member name="F:Automata.EPSILON">
      <summary>
le mot vide</summary>
    </member>
    <member name="F:Automata.Name">
      <summary>
le nom de l'automate</summary>
    </member>
    <member name="F:Automata.S">
      <summary>
le nombre des etats</summary>
    </member>
    <member name="F:Automata.S0">
      <summary>
l'etat initial</summary>
    </member>
    <member name="F:Automata.X">
      <summary>
l'alphabet</summary>
    </member>
    <member name="F:Automata.F">
      <summary>
les etats finaux</summary>
    </member>
    <member name="F:Automata.I">
      <summary>
la table de transitions</summary>
    </member>
    <member name="F:Automata.isConverted">
    </member>
    <member name="F:Automata.Dessin">
      <summary>
Le plan de dessin</summary>
    </member>
    <member name="F:Automata.grImage">
    </member>
    <member name="F:Automata.AutoImage">
    </member>
    <member name="F:Automata.myPointArray">
      <summary>
le tableau des positions des etats dans le drawpanel</summary>
    </member>
    <member name="F:Automata.DessinChanged">
    </member>
    <member name="T:Automata.TYPE">
      <summary>
Enumuration des type des automates d'etats finis</summary>
    </member>
    <member name="F:Automata.TYPE.Dfa">
    </member>
    <member name="F:Automata.TYPE.Nfa">
    </member>
    <member name="F:Automata.TYPE.PGfa">
    </member>
    <member name="F:Automata.TYPE.Gfa">
    </member>
    <member name="F:Automata.AutType">
    </member>
    <member name="M:Automata.InitI">
      <summary>
Initialiser la table de transitions de l'automate</summary>
    </member>
    <member name="M:Automata.InitI(System.Collections.ArrayList[0:,0:])">
      <summary>
Initiliser la table de transitions par des valeurs predefinies</summary>
      <param name="I">
La table de transitions initiale</param>
    </member>
    <member name="M:Automata.AddFinalState(System.Int32)">
      <summary>
Ajouter un etat final</summary>
      <param name="Sf">
Un etat à ajouter dans les etats finaux</param>
    </member>
    <member name="M:Automata.RemoveFinalState(System.Int32)">
      <summary>
Supprimer un etat final</summary>
      <param name="Sf">
Un etat à supprimer dans les etats finaux</param>
    </member>
    <member name="M:Automata.AddState">
      <summary>
Ajouter un etat à l'automate</summary>
    </member>
    <member name="M:Automata.SetStateNumber(System.Int32)">
      <summary>
Definir le nombre des etats de l'automate</summary>
      <param name="States">
Le nombre des etats</param>
    </member>
    <member name="M:Automata.getInstruction(System.Int32,System.Char)">
      <summary>
Obtenir les transitions de Si lisant Xi</summary>
      <returns>
ArrayList des etats suivants</returns>
      <param name="Si">
l'etat courant</param>
      <param name="Xi">
Le caractere lu</param>
    </member>
    <member name="M:Automata.getInstructionTable">
      <summary>
Obtenir la table des transitions</summary>
      <returns>
Un int en cas d'un automate de type Dfa , et un arraylist dans les autres type</returns>
    </member>
    <member name="M:Automata.getType">
      <summary>
Obtenir le type de l'automate</summary>
      <returns>
Type d e l'automate</returns>
    </member>
    <member name="M:Automata.setType(Automata.TYPE)">
      <summary>
Definir le type de l'automate</summary>
      <param name="type">
Le type de l'automate</param>
    </member>
    <member name="M:Automata.getMirror">
      <summary>
Obtenir l'automate de language miroire</summary>
      <returns>
Un automate de type PGfa</returns>
    </member>
    <member name="M:Automata.getComplementary">
      <summary>
Obtenir l'automate du language complement</summary>
      <returns>
Un automate de type Dfa</returns>
    </member>
    <member name="M:Automata.getIteration">
      <summary>
Obtenir l'automate du language Iteration</summary>
      <returns>
Un automate partiellement generalisé</returns>
    </member>
    <member name="M:Automata.getIterationPositive">
      <summary>
Obtenir l'automate du language Iteration positive</summary>
      <returns>
Un automate partiellement generalisé</returns>
    </member>
    <member name="M:Automata.containsFi(System.Collections.ArrayList)">
      <summary>
Verifie si un arraylist contient des etats finaux</summary>
      <returns>
true en cas ou le Arrayliste contient au moins un etat final</returns>
      <param name="Set">
Arrayliste des etats</param>
    </member>
    <member name="M:Automata.toIndex(System.Char)">
      <summary>
Obtenir l'index du caractere dans l'alphabet</summary>
      <returns>
L'index du caractere</returns>
      <param name="car">
caractere</param>
    </member>
    <member name="M:Automata.Intersect(System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
Definir si deux ArrayList ont des etats communs</summary>
      <returns>
True si il existe des etats communs</returns>
      <param name="Set1">
Le premier ArrayListe des etats</param>
      <param name="Set2">
Le deuxieme ArrayListe des etats</param>
    </member>
    <member name="M:Automata.ArrayListEquals(System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
Verifie si deux Arraylistes d'etats sont égaux</summary>
      <returns>
True si les deux ArrayListes sont égaux</returns>
      <param name="A">
Le premier ArrayListe des etats</param>
      <param name="B">
Le deuxieme ArrayListe des etats</param>
    </member>
    <member name="M:Automata.contains(System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
Verefier si un ArrayListe des ArrayListes contient un ArrayListe E</summary>
      <returns>
Le rang du l'ArrayListe E dans Set, -1 sinon</returns>
      <param name="Set">
</param>
      <param name="E">
</param>
    </member>
    <member name="M:Automata.arrayListUnion(System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
Obtenir l'union des deux ArrayListes des etats</summary>
      <returns>
L'union des ArrayListes</returns>
      <param name="A">
</param>
      <param name="B">
</param>
    </member>
    <member name="M:Automata.Union(Automata,Automata)">
      <summary>
Obtenir l'automate qui defini l'union des deux languages definis par A et B</summary>
      <returns>
Un automate de type PGfa</returns>
      <param name="A">
</param>
      <param name="B">
</param>
    </member>
    <member name="M:Automata.Concatenation(Automata,Automata)">
      <summary>
Obtenir l'automate qui defini la concatenation de deux laguages definis par A et B</summary>
      <returns>
Un automate de type PGfa</returns>
      <param name="A">
</param>
      <param name="B">
</param>
    </member>
    <member name="M:Automata.toGrammer">
      <summary>
Obtenir le grammaire qui defini le language defini par l'automate courant</summary>
      <returns>
Un grammer equivalant</returns>
    </member>
    <member name="M:Automata.Init_grid(System.Windows.Forms.DataGridView)">
      <summary>
Initialisation des colonnes et des lignes du DataGridView</summary>
      <param name="Grid">
Le DataGrid</param>
    </member>
    <member name="M:Automata.Afficher_grid(System.Windows.Forms.DataGridView)">
      <summary>
Afficher l'automate dans un DataGrid</summary>
      <param name="Grid">
Le DataGridView</param>
    </member>
    <member name="M:Automata.Draw(System.Windows.Forms.Panel,System.Boolean)">
      <summary>
Dessiner l'automate dans un Panel.</summary>
      <param name="DrawPanel">
Le panel ou on va dessiner l'automate</param>
      <param name="fix">
La methode de deplacement des etats dans le dessin true pour des emplacements fixes</param>
    </member>
    <member name="M:Automata.Recognize(System.String)">
      <summary>
Reconnetre un mot</summary>
      <returns>
true si le mot est reconnu par l'automate</returns>
      <param name="word">
le mot à tester</param>
    </member>
    <member name="M:Automata.trace(System.String)">
      <summary>
Reconnetre un mot</summary>
      <returns>
retourne le traçage !</returns>
      <param name="word">
le mot à tester</param>
    </member>
    <member name="M:Automata.toDfa">
      <summary>
Convertir l'automte vers un automate de type Dfa equivalant</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automata.toComplete">
      <summary>
Convertir l'automte vers un automate Complet</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automata.toReduced">
      <summary>
Convertir l'automte vers un automate reduit</summary>
      <returns>
Un automate deterministe</returns>
    </member>
    <member name="M:Automata.toNfa">
      <summary>
Convertir l'automte vers un automate de type Nfa equivalant</summary>
      <returns>
Un automate non deterministe</returns>
    </member>
    <member name="M:Automata.toPGfa">
      <summary>
Convertir l'automte vers un automate de type PGfa equivalant</summary>
      <returns>
Un automate partiellement généralisé</returns>
    </member>
    <member name="M:Automata.toGfa">
      <summary>
Convertir l'automte vers un automate de type Gfa equivalant</summary>
      <returns>
Un automate généralisé</returns>
    </member>
    <member name="T:Automates.Program">
    </member>
    <member name="M:Automates.Program.Main">
      <summary>
The main entry point for the application.</summary>
    </member>
    <member name="T:Automates.GfaInstruction">
    </member>
    <member name="F:Automates.GfaInstruction.Si">
    </member>
    <member name="F:Automates.GfaInstruction.Xi">
    </member>
    <member name="F:Automates.GfaInstruction.Sj">
    </member>
    <member name="M:Automates.GfaInstruction.#ctor(System.Int32,System.String,System.Int32)">
      <summary>
Initializes a new instance of the <see cref="T:Automates.GfaInstruction">GfaInstruction</see> class.</summary>
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="Sj">
</param>
    </member>
    <member name="M:Automates.GfaInstruction.#ctor(System.Int32,System.Char,System.Int32)">
      <summary>
Initializes a new instance of the <see cref="T:Automates.GfaInstruction">GfaInstruction</see> class.</summary>
      <param name="Si">
</param>
      <param name="Xi">
</param>
      <param name="Sj">
</param>
    </member>
    <member name="M:Automates.GfaInstruction.ToString">
    </member>
    <member name="M:Automates.GfaInstruction.Equals(Automates.GfaInstruction)">
      <param name="instruction">
</param>
    </member>
    <member name="T:Automates.AutomateSaver">
      <summary>
Class de sauvegarde d'un automate dans un fichier de type "aut"</summary>
    </member>
    <member name="T:Automates.AutomateSaver.AutomtateSaveResult">
      <summary>
Le type de resultat apres le sauvegarde</summary>
    </member>
    <member name="F:Automates.AutomateSaver.AutomtateSaveResult.NEW">
    </member>
    <member name="F:Automates.AutomateSaver.AutomtateSaveResult.REPLACE">
    </member>
    <member name="F:Automates.AutomateSaver.AutomtateSaveResult.ERROR">
    </member>
    <member name="M:Automates.AutomateSaver.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Automates.AutomateSaver">AutomateSaver</see> class.</summary>
    </member>
    <member name="M:Automates.AutomateSaver.Save(Automata,System.String,System.String)">
      <summary>
Sauvegarder l'automate dans un ficher</summary>
      <returns>
le resultat du sauvegarde</returns>
      <param name="Automate">
l'automate à sauvegarder</param>
      <param name="FileName">
le nom du fichier</param>
      <param name="folder">
le repertoire qui va contenir le fichier</param>
    </member>
    <member name="M:Automates.AutomateSaver.Save(Automata,System.String)">
      <returns>
Le resultat du sauvegarde</returns>
      <param name="Automate">
L'automate à sauvegarder.</param>
      <param name="Path">
le path du fichier</param>
    </member>
    <member name="T:Automates.NfaCreation">
    </member>
    <member name="F:Automates.NfaCreation.initial">
    </member>
    <member name="F:Automates.NfaCreation.UserNfa">
    </member>
    <member name="F:Automates.NfaCreation.panel1">
    </member>
    <member name="F:Automates.NfaCreation.Modifier1">
    </member>
    <member name="F:Automates.NfaCreation.Valide1">
    </member>
    <member name="F:Automates.NfaCreation.groupBox3">
    </member>
    <member name="F:Automates.NfaCreation.label3">
    </member>
    <member name="F:Automates.NfaCreation.Xlist">
    </member>
    <member name="F:Automates.NfaCreation.RmX">
    </member>
    <member name="F:Automates.NfaCreation.caracteres">
    </member>
    <member name="F:Automates.NfaCreation.ToX">
    </member>
    <member name="F:Automates.NfaCreation.groupBox1">
    </member>
    <member name="F:Automates.NfaCreation.label2">
    </member>
    <member name="F:Automates.NfaCreation.initialList">
    </member>
    <member name="F:Automates.NfaCreation.RmF">
    </member>
    <member name="F:Automates.NfaCreation.CopytoF">
    </member>
    <member name="F:Automates.NfaCreation.labelEtatsFinaux">
    </member>
    <member name="F:Automates.NfaCreation.labelEtats">
    </member>
    <member name="F:Automates.NfaCreation.EtatsFList">
    </member>
    <member name="F:Automates.NfaCreation.EtatsList">
    </member>
    <member name="F:Automates.NfaCreation.NbEtatLabel">
    </member>
    <member name="F:Automates.NfaCreation.panel2">
    </member>
    <member name="F:Automates.NfaCreation.Valider2">
    </member>
    <member name="F:Automates.NfaCreation.groupBox2">
    </member>
    <member name="F:Automates.NfaCreation.label6">
    </member>
    <member name="F:Automates.NfaCreation.label5">
    </member>
    <member name="F:Automates.NfaCreation.label4">
    </member>
    <member name="F:Automates.NfaCreation.Ajouter">
    </member>
    <member name="F:Automates.NfaCreation.groupBox4">
    </member>
    <member name="F:Automates.NfaCreation.label7">
    </member>
    <member name="F:Automates.NfaCreation.supprimer">
    </member>
    <member name="F:Automates.NfaCreation.transitions">
    </member>
    <member name="F:Automates.NfaCreation.SJ">
    </member>
    <member name="F:Automates.NfaCreation.SiXSj">
    </member>
    <member name="F:Automates.NfaCreation.SI">
    </member>
    <member name="F:Automates.NfaCreation.Name_box">
    </member>
    <member name="F:Automates.NfaCreation.label1">
    </member>
    <member name="F:Automates.NfaCreation.annuler">
    </member>
    <member name="F:Automates.NfaCreation.Nbetats">
    </member>
    <member name="M:Automates.NfaCreation.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Automates.NfaCreation">NfaCreation</see> class.</summary>
    </member>
    <member name="M:Automates.NfaCreation.InitializeComponent">
    </member>
    <member name="M:Automates.NfaCreation.Valide1_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.Modifier1_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.ToX_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.RmX_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.caracteres_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.Xlist_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.EtatsList_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.EtatsFList_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.Nbetats_ValueChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.initialList_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.caracteres_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.Xlist_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.EtatsList_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.SI_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.CopytoF_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.RmF_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.SiXSj_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.SJ_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.Ajouter_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.transitions_SelectedIndexChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.supprimer_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.Valider2_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.ToInt(System.String)">
      <param name="etat">
</param>
    </member>
    <member name="M:Automates.NfaCreation.Nfa_creation_Load(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.Name_box_TextChanged(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.annuler_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:Automates.NfaCreation.EtatsFList_DoubleClick(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
  </members>
</doc>
